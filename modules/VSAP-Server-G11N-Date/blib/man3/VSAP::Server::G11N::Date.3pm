.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Server::G11N::Date 3"
.TH VSAP::Server::G11N::Date 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Server::G11N::Date \- Perl globalization date module does date conversions between timezones
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VSAP::Server::G11N::Date;
\&
\&  my $date = new VSAP::Server::G11N::Date(\*(AqFri Mar  8 16:15:55 MST 2002\*(Aq);
\&
\&  print "The local date is " . $date\->local\->date . "\en";
\&
\&  print "The local year is " . $date\->local\->year . "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
VSAP::Server::G11N::Date is a Perl class that uses HTTP::Date and Time::Zone
to convert dates into the desired (local) representation and \s-1GMT\s0.
.PP
VSAP::Server::G11N::Date contains a VSAP::Server::G11N::Date::Epoch object and three
VSAP::Server::G11N::Date::Simple objects, whose interfaces are described
below.  VSAP::Server::G11N::Date objects have just a few methods of their
own:
.IP "\fBnew\fR" 4
.IX Item "new"
The constructor for this object. You may initialize it with epoch
seconds or a date string:
.Sp
.Vb 3
\&  $d = new VSAP::Server::G11N::Date( epoch => 1015631263 );
\&  $d = new VSAP::Server::G11N::Date( date  => \*(AqFri Mar  8 16:47:42 MST 2002\*(Aq );
\&  $d = new VSAP::Server::G11N::Date( \*(AqFri Mar  8 16:47:42 MST 2002\*(Aq );  ## date is implied
.Ve
.Sp
You may also pass along a timezone or offset to coerce the \fBLocal\fR
date object:
.Sp
.Vb 3
\&  ## use central european time regardless of $ENV{TZ}
\&  $d = new VSAP::Server::G11N::Date( date  => \*(AqFri Mar  8 16:47:42 MST 2002\*(Aq,
\&                              tz    => \*(AqCET\*(Aq );
\&
\&  ## same thing
\&  $d = new VSAP::Server::G11N::Date( date   => \*(AqFri Mar  8 16:47:42 MST 2002\*(Aq,
\&                              offset => \*(Aq+0100\*(Aq );
.Ve
.IP "\fBepoch\fR" 4
.IX Item "epoch"
Returns epoch seconds derived from the object initialization (i.e.,
if you initialized the object with epoch seconds, those will be
returned here. If you initialized with a date, the date will be
converted to epoch seconds and returned here).
.IP "\fBdate\fR" 4
.IX Item "date"
The original \*(L"pristine\*(R" date string used to initialize this object.
If the object was initialized with epoch seconds, this will return
the result of \fIscalar gmtime($obj\-\fRepoch)> (which is a \s-1GMT\s0 date
string). Due to the variety of format options, this may or may not
look exactly like the date returned by the
\&\fBVSAP::Server::G11N::Date::Original\fR object.
.IP "\fBoffset\fR" 4
.IX Item "offset"
If an offset was used to initialize the object, that will be returned
here. If a timezone was used to initialize the object, it will be
translated to an offset via \fITime::Zone\fR\|(3) and returned here. Returns
undefined if it was never initialized.
.IP "\fBtz\fR" 4
.IX Item "tz"
If an timezone was used to initialize the object, that will be
returned here. If an offset was used to initialize the object, it will
be translated to an timezone via \fITime::Zone\fR\|(3) and returned here.
Returns undefined if it was never initialized.
.IP "\fBoriginal\fR" 4
.IX Item "original"
Returns a handle to the \fBVSAP::Server::G11N::Date::Original\fR object (which
is a subclass of \fBVSAP::Server::G11N::Date::Simple\fR described below).
.IP "\fBgmt\fR" 4
.IX Item "gmt"
Returns a handle to the \fBVSAP::Server::G11N::Date::GMT\fR object (which is a
subclass of \fBVSAP::Server::G11N::Date::Simple\fR described below).
.IP "\fBlocal\fR" 4
.IX Item "local"
Returns a handle to the \fBVSAP::Server::G11N::Date::Local\fR object (which is
a subclass of \fBVSAP::Server::G11N::Date::Simple\fR described below).
.SS "VSAP::Server::G11N::Date::Epoch"
.IX Subsection "VSAP::Server::G11N::Date::Epoch"
VSAP::Server::G11N::Date uses a VSAP::Server::G11N::Date::Epoch object to store the
epoch of the incoming date. This epoch object is later used for date
conversions.
.PP
You may access VSAP::Server::G11N::Date::Epoch objects directly or as part
of a VSAP::Server::G11N::Date object (which is more common).
VSAP::Server::G11N::Date::Epoch converts a time representation into epoch
seconds and epoch seconds to \s-1GMT\s0 time.
.IP "\fBnew\fR" 4
.IX Item "new"
Creates a new VSAP::Server::G11N::Date::Epoch object from a date or existing
epoch time.
.Sp
.Vb 3
\&    $e = new VSAP::Server::G11N::Date::Epoch( \*(AqWed Mar 13 15:11:24 MST 2002\*(Aq );
\&    $e = new VSAP::Server::G11N::Date::Epoch( \*(Aqdate\*(Aq => \*(AqWed Mar 13 15:11:24 MST 2002\*(Aq );
\&    $e = new VSAP::Server::G11N::Date::Epoch( \*(Aqepoch\*(Aq => 1016057763 );
.Ve
.Sp
Valid date formats are the same as those found in the
HTTP::Date::parse_date function.
.IP "\fBepoch\fR" 4
.IX Item "epoch"
Depending on what you initialized the object with, \fBepoch\fR returns
the original epoch seconds you passed in or the epoch seconds obtained
from the date you passed as a parameter.
.IP "\fBdate\fR" 4
.IX Item "date"
Returns the original date passed in. If no date was passed in as a
parameter, a date string in \s-1GMT\s0 will be returned (gmtime is used to
generate this string).
.SS "VSAP::Server::G11N::Date::Simple"
.IX Subsection "VSAP::Server::G11N::Date::Simple"
VSAP::Server::G11N::Date uses three instances of VSAP::Server::G11N::Date::Simple
to store the original incoming date, the \s-1GMT\s0 representation of the
original date, and the localtime representation of the original date.
.PP
VSAP::Server::G11N::Date::Simple does not have an initialization or parsing
routine\*(--it's sort of a 'virtual' base class, never meant to be used
directly but inherited.
.PP
The three instances of VSAP::Server::G11N::Date::Simple are:
.IP "\fBVSAP::Server::G11N::Date::Original\fR" 4
.IX Item "VSAP::Server::G11N::Date::Original"
.PD 0
.IP "\fBVSAP::Server::G11N::Date::GMT\fR" 4
.IX Item "VSAP::Server::G11N::Date::GMT"
.IP "\fBVSAP::Server::G11N::Date::Local\fR" 4
.IX Item "VSAP::Server::G11N::Date::Local"
.PD
.PP
These three classes each have the following accessor methods:
.IP "\fBnew\fR" 4
.IX Item "new"
Creates a new object which inherits from VSAP::Server::G11N::Date::Simple:
.RS 4
.IP "\fBVSAP::Server::G11N::Date::Original\fR" 4
.IX Item "VSAP::Server::G11N::Date::Original"
Creates a new VSAP::Server::G11N::Date::Original object. This object contains
the original date with timezone cannonicalization. The first argument
is a date string that can be parsed by HTTP::Date.
.Sp
.Vb 1
\&    $o = new VSAP::Server::G11N::Date::Original( $e\->date );  ## $e is an epoch object
.Ve
.IP "\fBVSAP::Server::G11N::Date::GMT\fR" 4
.IX Item "VSAP::Server::G11N::Date::GMT"
Creates a new VSAP::Server::G11N::Date::GMT object. This object contains the
original date adjusted to \s-1GMT\s0 time. The first object is \s-1GMT\s0 seconds
(this method uses gmtime to populate its data members).
.Sp
.Vb 1
\&    $o = new VSAP::Server::G11N::Date::GMT( $e\->epoch );  ## $e is an epoch object
.Ve
.IP "\fBVSAP::Server::G11N::Date::Local\fR" 4
.IX Item "VSAP::Server::G11N::Date::Local"
Creates a new VSAP::Server::G11N::Date::Local object. This object contains
the original date adjusted for localtime settings. \f(CW$ENV\fR{\s-1TZ\s0} is used
to determine the localtime preference. The first argument is an epoch
time. If a second argument (a timezone string) is present, the object
will use that instead of \f(CW$ENV\fR{\s-1TZ\s0}.
.Sp
The timezone string should be a path relative to the zoneinfo
directory (/usr/share/zoneinfo on FreeBSD).
.Sp
.Vb 1
\&    $o = new VSAP::Server::G11N::Date::Local( $e\->epoch, \*(AqAsia/Tokyo\*(Aq );  ## $e is an epoch object
.Ve
.RE
.RS 4
.RE
.IP "\fBdate\fR" 4
.IX Item "date"
Returns a string representation of the object in the following format:
.Sp
.Vb 1
\&    13 Feb 2002 23:11:48 HST
.Ve
.IP "\fByear\fR" 4
.IX Item "year"
Returns the year represented in this object.
.IP "\fBmonth\fR" 4
.IX Item "month"
Returns the month number (1 = January, 12 = December) represented in
this object.
.IP "\fBday\fR" 4
.IX Item "day"
Returns the day of month (1 \- 28, 29, 30, 31) represented in this
object.
.IP "\fBhour\fR" 4
.IX Item "hour"
Returns the 24\-hour portion represented in this object (e.g., 2pm is
14:00 hours so \f(CW$obj\fR\->hour returns '14').
.IP "\fBhour_12\fR" 4
.IX Item "hour_12"
Returns the 12\-hour portion represented in this object (e.g., 14:00
= 2:00 so \f(CW$obj\fR\->hour returns '14' and \f(CW$obj\fR\->hour_12 returns '2').
.IP "\fBminute\fR" 4
.IX Item "minute"
Returns the minute portion represented in this object.
.IP "\fBsecond\fR" 4
.IX Item "second"
Returns the second portion represented in this object.
.IP "\fBoffset\fR" 4
.IX Item "offset"
Returns the \s-1GMT\s0 offset in hours for the date represented in this
object as a \s-1RFC\s0 822\-style offset (e.g., +0100).
.IP "\fBgmt_offset\fR" 4
.IX Item "gmt_offset"
Returns the number of seconds offset from \s-1GMT\s0 time.
.IP "\fBtz\fR" 4
.IX Item "tz"
Returns the timezone abbreviation for the date represented in this
object (e.g., \s-1CET\s0, \s-1MST\s0, \s-1PDT\s0, etc.).
.IP "\fBpm\fR" 4
.IX Item "pm"
Returns true if the 24\-hour value is greater than or equal to 12.
.IP "\fBwday\fR" 4
.IX Item "wday"
\&\fBVSAP::Server::G11N::Date::GMT\fR and \fBVSAP::Server::G11N::Date::Local\fR objects
only. Returns weekday (e.g., Sun, Mon, Tue, etc.).
.IP "\fByday\fR" 4
.IX Item "yday"
\&\fBVSAP::Server::G11N::Date::GMT\fR and \fBVSAP::Server::G11N::Date::Local\fR objects
only. Returns day of year (0\-365).
.IP "\fBdst\fR" 4
.IX Item "dst"
\&\fBVSAP::Server::G11N::Date::Local\fR objects only. Set if the date represented
in this object falls during daylight saving time.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&    my $d = new VSAP::Server::G11N::Date( \*(AqThu, 14 Feb 2002 13:11:48 +0400\*(Aq );
\&
\&    print "The original year is " . $d\->original\->year . "\en";
\&    print "The original hour is " . $d\->original\->hour . "\en";
\&
\&    print "The local year is " . $d\->local\->year . "\en";
\&    print "The local hour is " . $d\->local\->hour . "\en";
\&
\&    print "FYI, the GMT representation of " . $d\->original\->date . 
\&        " is " . $d\->gmt\->date . "\en";
\&
\&
\&    my $e = new VSAP::Server::G11N::Date( epoch => 1015631263 );
\&
\&    print "The original date was " . $e\->original\->date . "\en";
\&    $ENV{TZ} = \*(AqMST7MDT\*(Aq;
\&    print "In Utah, that date is " . $e\->local\->date . "\en";
\&    print "In Utah, it is " . ($d\->local\->dst ? \*(Aq\*(Aq : \*(Aqnot \*(Aq) . "daylight saving time\en";
\&
\&    $ENV{TZ} = \*(AqCET\*(Aq;
\&    print "In Barcelona, that date is " . $e\->local\->date . "\en";
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
If the incoming date has no offset, '+0000' (\s-1GMT\s0) is assumed.
.IP "\(bu" 4
If the incoming date does not use a timezone string but does use an
offset instead, it is possible that the reverse offset\->zone mapping
in Time::Zone is incorrect (multiple zone names cover the same
offsets). Sorry.
.Sp
Also, if an known timezone abbreviation is used in the original
(incoming) date, the date will not translate correctly for localtime
and will show \s-1GMT\s0 instead (though the \s-1TZ\s0 might be correct\*(--this is a
bug).
.IP "\(bu" 4
The \fBpm\fR field in \fBVSAP::Server::G11N::Date::Simple\fR should really be a
quad-state variable instead of a boolean. What we call '12 am' is
really '12 midnight' (if you're speaking of hours) since it is neither
ante-meridian nor post-meridian; '12 pm' is really '12 noon' by the
same token. We keep with colloquial usage of '12 am' and '12 pm' for
simplicity's sake.
.IP "\(bu" 4
\&\fBVSAP::Server::G11N::Date\fR can handle half-offsets (1800 seconds) also, but
cannot do third-offsets (1200 seconds). This is a todo item. (If you
live somewhere with a 20 minute offset, please accept my apologies).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIHTTP::Date\fR\|(3), \fITime::Zone\fR\|(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott Wiersdorf, <scott@perlcode.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by \s-1MYNAMESERVER\s0, \s-1LLC\s0
.PP
No part of this module may be duplicated in any form without written
consent of the copyright holder.
