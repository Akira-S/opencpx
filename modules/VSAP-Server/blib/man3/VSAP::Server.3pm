.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Server 3"
.TH VSAP::Server 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Server \- Perl module comprising the server end of VSAP communications.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VSAP::Server;
\&
\&  my $server     = new VSAP::Server;
\&
\&  $vsap_request = ... somehow read some XML data which represents an vsap request ... 
\&
\&  $vsap_response = $server\->process_request($vsap_request);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a server library to process \s-1VSAP\s0 requests. The main module, VSAP::Server, parses, 
validates, and processes them, and returns data. The server code itself (as well as any 
thread or forking implementations) is external to this module.
.PP
The submodules VSAP::Server::XML and VSAP::Server::Modules::vsap::auth perform parsing and 
authentication, respectively. Other modules under the VSAP::Server::Modules namespace 
contain the actual functions called by VSAP::Server, preferably organized by 
the \s-1VSAP\s0 \s-1XML\s0 namespace definitions. Standards for these modules are described 
in the VSAP::Server::Proto dummy module, which outlines a framework for 
easily implementing extensions to the \s-1VSAP\s0 server.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan Brian <dbrian@improvist.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by \s-1MYNAMESERVER\s0, \s-1LLC\s0
.PP
No part of this module may be duplicated in any form without written
consent of the copyright holder.
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 3
\&    * VSAP::Server\->new();
\&    * Param: none
\&    * Returns: a blessed VSAP::Server object.
.Ve
.SS "\fIgreet()\fP"
.IX Subsection "greet()"
.Vb 3
\&    * $vsap\->greet()
\&    * Param: none. 
\&    * Return: A string containing the initial vsap response sent to a connecting client.
.Ve
.SS "\fIxml()\fP"
.IX Subsection "xml()"
.Vb 3
\&    * $vsap\->xml
\&    * Param: none
\&    * Returns: The XML::LibXML object contained within this VSAP::Server object.
.Ve
.SS "\fIdom()\fP"
.IX Subsection "dom()"
.Vb 3
\&    * $vsap\->dom
\&    * Param: none
\&    * Returns: The XML::LibXML::Document element being used in this request.
.Ve
.SS "\fIprefs()\fP"
.IX Subsection "prefs()"
.Vb 3
\&    * $vsap\->prefs(\*(Aqname\*(Aq);
\&    * Param: none
\&    * Return: The value of the preference given by \*(Aqname\*(Aq.
.Ve
.SS "\fItmp_prefs()\fP"
.IX Subsection "tmp_prefs()"
.Vb 3
\&    * $vsap\->tmp_prefs(\*(Aqname\*(Aq);
\&    * Param: none
\&    * Return: The value of the temporary preference given by \*(Aqname\*(Aq.
.Ve
.SS "\fIldap()\fP"
.IX Subsection "ldap()"
.Vb 3
\&    * $vsap\->ldap
\&    * Param: none
\&    * Return: Return the VSAP::Server::LDAP::ldap object contained in this VSAP::Server object.
.Ve
.PP
.Vb 4
\&    Method: authenticate
\&    Usage: $self\->authenticate; 
\&    Purpose: To authenticate the given connection. 
\&    Returns: the value of authenticated or the return of the auth::authenticate method.
.Ve
.SS "\fIauthenticate()\fP"
.IX Subsection "authenticate()"
.Vb 3
\&    * $vsap\->authenticate
\&    * Param: none
\&    * Return: Authenticate the current connection.
.Ve
.SS "\fIauthenticated()\fP"
.IX Subsection "authenticated()"
.Vb 3
\&    * $vsap\->authenticated
\&    * Usage: $self\->authenticated; 
\&    * Return: true if this connection is authenticated, false otherwise.
.Ve
.ie n .SS "\fIprocess_request_internal()\fP * $vsap\->process_request_internal($vsap_obj); * Param: the VSAP::XMLObj object which represents a <vsap type='..'> call. *      : the result dom used to return results from vsap handlers. * Returns: nothing."
.el .SS "\fIprocess_request_internal()\fP * \f(CW$vsap\fP\->process_request_internal($vsap_obj); * Param: the VSAP::XMLObj object which represents a <vsap type='..'> call. *      : the result dom used to return results from vsap handlers. * Returns: nothing."
.IX Subsection "process_request_internal() * $vsap->process_request_internal($vsap_obj); * Param: the VSAP::XMLObj object which represents a <vsap type='..'> call. *      : the result dom used to return results from vsap handlers. * Returns: nothing."
.Vb 1
\&    This method is used to process a specific vsap request.
.Ve
.SS "\fIprocess_request()\fP"
.IX Subsection "process_request()"
.Vb 5
\&    * $vsap\-process_request("<vsap>...</vsap>")
\&    * Param: The vsap content to be parsed. 
\&    * Return: The response from the vsap server or undef on error. 
\&    * Notes: This calls the vsap handles which are referenced by the incomming XML data. This 
\&            will setup the _result_dom and the value of that result_dom is returned as a string.
.Ve
.SS "\fIlog()\fP"
.IX Subsection "log()"
.Vb 5
\&     * $vsap\->log($priority, $message)
\&     * Param: $priority <IN> A syslog priority, info, debug, error, etc. See syslog(3)
\&     * Param: $message <IN>
\&     * Notes: Will log a message to syslog at the appropriate priority.
\&     *        Is backwards compatiable with the $vsap\->log($message) usage.
.Ve
.SS "\fIerror()\fP"
.IX Subsection "error()"
.Vb 4
\&    * $vsap\->error($code,"Message","Extra info");
\&    * Param: error code <IN>, error message <IN>, extra information <IN> 
\&    * Return: Nothing. 
\&    * Notes: Places an vsap error response into the _result_dom.
.Ve
.SS "\fIdisconnect()\fP"
.IX Subsection "disconnect()"
.Vb 3
\&    * $vsap\->disconnect()
\&    * Param: none
\&    * Return: true if the server should disconnect.
.Ve
.SS "\fIneed_apache_restart()\fP"
.IX Subsection "need_apache_restart()"
.Vb 2
\&    * Marks the need to restart Apache after the request is finished,
\&      either by the client (if local and cloud) or the server.
.Ve
.SS "\fIis_linux()\fP"
.IX Subsection "is_linux()"
.Vb 1
\&    * Returns true if the OS is Linux.
.Ve
.SS "\fIis_freebsd6()\fP"
.IX Subsection "is_freebsd6()"
.Vb 1
\&    * Returns true if the OS is FreeBSD 6.x.
.Ve
.SS "\fIis_freebsd4()\fP"
.IX Subsection "is_freebsd4()"
.Vb 1
\&    * Returns true if the OS is FreeBSD 4.x.
.Ve
.SS "\fIis_freebsd()\fP"
.IX Subsection "is_freebsd()"
.Vb 1
\&    * Returns true if the OS is FreeBSD (any version)
.Ve
.SS "\fIis_signature()\fP"
.IX Subsection "is_signature()"
.Vb 3
\&    * Returns true if the platform is Signature. This is determined using the 
\&      presence of a /usr/local/vwh directory. If this criteria changes, then
\&      the test should be updated accordingly.  See the constructor.
.Ve
.SS "\fIis_vps()\fP"
.IX Subsection "is_vps()"
.Vb 4
\&    Returns true if the platform is VPS (VPSv2, VPSv3, or VPS\-Linux). This is
\&    determined using the absence of the /usr/local/vwh directory (which will
\&    only be present on a signature box); if this criteria changes, so should
\&    the test. See the constructor for VSAP::Server for that code.
.Ve
.SS "\fIis_cloud()\fP"
.IX Subsection "is_cloud()"
.Vb 4
\&    Returns true if the platform is Cloud(n). This is determined using the 
\&    presense of the /var/vsap directory (which will only be present on a 
\&    cloud account); if this criteria changes, so should the test. See the 
\&    constructor for VSAP::Server for that code.
.Ve
.SS "\s-1\fIDESTROY\s0()\fP"
.IX Subsection "DESTROY()"
.Vb 3
\&    * $vsap\->DESTROY
\&    * Param: none
\&    * Return: nothing.
.Ve
