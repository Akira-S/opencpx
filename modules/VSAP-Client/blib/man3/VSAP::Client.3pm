.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Client 3"
.TH VSAP::Client 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Client \- VSAP client object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VSAP::Client;
\&
\&  # INET mode. 
\&  $client = VSAP::Client\->new( mode => \*(Aqtcp\*(Aq, Hostname => \*(Aqsomehost\*(Aq, PeerPort => 551);
\&
\&  # Unix domain socket mode.  
\&  $client = VSAP::Client\->new( mode => \*(Aqunix\*(Aq, Socket => \*(Aq/var/run/vsapd.sock\*(Aq);
\&
\&  # Mode/Options determined by VSAP::Client::Config
\&  $client = VSAP::Client\->new();
\&
\&  # Convert to an SSL connection.
\&  $client\->starttls()
\&        or die "TLS negotiation failed.";
\&
\&  my $sessionkey = $client\->authenticate(\*(Aquser\*(Aq,\*(Aqpassword\*(Aq,\*(Aqhostname\*(Aq);
\&
\&  unless ($sessionkey)
\&        die "Unable to authenticate: ". $client\->response\->toString; 
\&
\&  $response = $client\->send("<vsap> <vsap type=\*(Aqsome:vsap:module\*(Aq> <some_vsap_xml/> </vsap> </vsap>");
\&
\&  unless ($response)
\&        die "Unable to send request. ";
\&  
\&  if ($response\->toString =~ (/some valid response/)) { 
\&        # We got a valid response;
\&  } else { 
\&        # We got some invalid response. 
\&  }
\&
\&  # Let us shut it down now. 
\&  $client\->quit;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides client acccess to the vsap server.  The default configuration options will 
come from the VSAP::Client::Config module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1\fIVSAP\s0\fR\|(1), \fIVSAP::Server\fR\|(3), \fIVSAP::Client::Config\fR\|(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
System Administrator, <root@securesites.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by \s-1MYNAMESERVER\s0, \s-1LLC\s0
.PP
No part of this module may be duplicated in any form without written
consent of the copyright holder.
.SH "Methods"
.IX Header "Methods"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 3
\&    * VSAP::Client\->new( mode => \*(Aqtcp\*(Aq, option2 => \*(Aqvalue\*(Aq, option3 => \*(Aqvalue\*(Aq);)
\&    * Param: key value pairs which are dependant on the value of mode. 
\&    * Return: A blessed object either VSAP::Client::UNIX, VSAP::Client::INET
.Ve
.SS "_strip_response"
.IX Subsection "_strip_response"
.Vb 3
\&    * $client\->_strip_response; 
\&    * Param: none
\&    * Return: none.
\&
\&    Method used to parse and strip the response contained in this object. Extracts certain
\&    information from the response and places it in various class variables. Parses either
\&    the greeting and/or authentication response.
.Ve
.SS "\fIsend()\fP"
.IX Subsection "send()"
.Vb 3
\&    * $client\->send("<vsap> <vsap type=\*(Aqsome:module\*(Aq>...</vsap></vsap>");
\&    * Param: The data to be sent to the vsap server. 
\&    * Return: The response DOM from the vsap server. 
\&
\&    Method used to send a request to the vsap server, obtain and return the response. Returns the response as a scalar (DOM) on success, or undef on failure.
.Ve
.SS "\fIquit()\fP"
.IX Subsection "quit()"
.Vb 3
\&    * $client\->quit();
\&    * Param: none.
\&    * Return: nothing.
\&
\&    Method used to send a request to the vsap server, obtain and return the response. Returns
\&    the response as a scalar on success, or undef on failure.
.Ve
.SS "\s-1DESTROY\s0"
.IX Subsection "DESTROY"
.Vb 2
\&    * Param: none.
\&    * Return: nothing.
\&
\&    Perl DESTROY method, simply calls quit on the object.
.Ve
.SS "\fIstarttls()\fP"
.IX Subsection "starttls()"
.Vb 3
\&    * $client\->starttls()
\&    * Param: none
\&    * Return: true on success.
\&
\&    Start an SSL session on the connection (negotiate TLS).
\&    This must be done before the connection is authenticated.
\&    Failure to start an SSL session is a fatal error, closing the connection.
.Ve
.SS "\fIauthenticated()\fP"
.IX Subsection "authenticated()"
.Vb 3
\&    * $client\->authenticated()
\&    * Param: none
\&    * Return: True if the connection is authenticated. 
\&
\&    Method to return true/false depending on whether or not this client connection
\&    is authenticated.
.Ve
.SS "\fIauthenticate()\fP"
.IX Subsection "authenticate()"
.Vb 3
\&    * $client\->authenticate()
\&    * Param: username, password, hostname all scalars. 
\&    * Return: The session key from the authentication response. 
\&
\&    Method used to send an \*(Aqauth\*(Aq request to vsap. A session key is returned.
.Ve
.SS "\fIcommand()\fP"
.IX Subsection "command()"
.Vb 3
\&    * $client\->command("<vsap>...</vsap>");
\&    * Params: The vsap request which is sent to the server. 
\&    * Return: true if the command was successfully sent, false otherwise. 
\&
\&    This method simply writes the data to the connection after doing some newline processing. If unable
\&    to write the fully request, the connection will be closed and undef will be returned. If the connection
\&    is not currently opened, undef will be returned. If a SIGPIPE is received undef will be returned. If undef
\&    is returned, it is safe to assume that the connection is in an inconsistent state and a new connection should
\&    be made. 
\&
\&    Don\*(Aqt use this method, use C<send()> instead as it automatically processes and returns the response.
.Ve
.SS "\fIget_response()\fP"
.IX Subsection "get_response()"
.Vb 3
\&    * $client\->get_response;
\&    * Param: none
\&    * Return: The response read from the last call to parse_response.
.Ve
.SS "\fIparse_response()\fP"
.IX Subsection "parse_response()"
.Vb 3
\&    * $client\->parse_response;
\&    * Param: none
\&    * Return: A response from the server or undef on failure. 
\&
\&    This method reads a complete response from the server and returns this value also
\&    saving this value for use by the C<response()> method. 
\&
\&    The read request is validated by looking for <vsap/> or </vsap> followed by \er\en
\&    followed by the end of the string.
.Ve
.SS "\fIvalid_utf8()\fP"
.IX Subsection "valid_utf8()"
.Vb 3
\&    * $client\->valid_utf8($string);
\&    * Param: string
\&    * Return: sanitized string
\&
\&    This method takes a string as input, checks string for valid utf8\-ness, and will
\&    sanitize the string if the string is not valid utf\-8.
.Ve
.SS "\fIdebug_print()\fP"
.IX Subsection "debug_print()"
.Vb 3
\&    * $client\->debug_print(1,"Some message");
\&    * Param: $output (IN), $message (IN).
\&    * Return: Nothing.
\&
\&    This method is used to print the communication between this client and the server. 
\&    If the first parameter is true (1), the value printed will be indicated to be output 
\&    (from client to server), otherwise it will be considered input.
.Ve
.SS "\fIdebug()\fP"
.IX Subsection "debug()"
.Vb 3
\&    * $client\->debug($newlevel);
\&    * Param: $newlevel (IN)
\&    * Return: The old debug level. 
\&
\&    Method used to set the debug level of the client. Will also cause
\&    the @ISA heirarchy to be printed.
.Ve
.SS "\fI_print_isa()\fP"
.IX Subsection "_print_isa()"
.Vb 3
\&    * $client\->_print_isa()
\&    * Param: none
\&    * Return: none
\&
\&    Method used to print out all memebers of the @ISA, and all their members of @ISA. Just
\&    to get the full inheritance tree of this object.
.Ve
.SS "\fIresponse()\fP"
.IX Subsection "response()"
.Vb 3
\&    * $client\->response
\&    * Param: none
\&    * Return: The DOM value of the last response. 
\&
\&    Method to obtain the last response from the server.
.Ve
.SS "\fIstatus()\fP"
.IX Subsection "status()"
.Vb 3
\&    * $client\->status
\&    * Param: none
\&    * Return: The value of the vsap_status
\&
\&    Obtain the value of vsap_status as reported by the VSAP greeting.
.Ve
.SS "\fIhostname()\fP"
.IX Subsection "hostname()"
.Vb 3
\&    * $client\->hostname
\&    * Param: none
\&    * Return: The value of the hostname
\&
\&    Obtain the value of hostname as reported by the VSAP greeting.
.Ve
.SS "\fIsessionkey()\fP"
.IX Subsection "sessionkey()"
.Vb 3
\&    * $client\->sessionkey
\&    * Param: none
\&    * Return: The sessionkey returned by the auth response. 
\&
\&    Obtain the value of sessionkey as obtained by the VSAP auth response.
.Ve
.SS "\fIversion()\fP"
.IX Subsection "version()"
.Vb 3
\&    * $client\->version
\&    * Param: none
\&    * Return: The version of the vsap server. 
\&
\&    Obtain the version of the VSAP::Server object as reported during the VSAP greeting.
.Ve
.SS "\fIauthscheme()\fP"
.IX Subsection "authscheme()"
.Vb 3
\&    * $client\-authscheme>
\&    * Param: none
\&    * Return: The authscheme returned by the VSAP greeting. 
\&
\&    Obtain the value of authscheme as obtained by the VSAP greeting.
.Ve
.SS "\fIusername()\fP"
.IX Subsection "username()"
.Vb 3
\&    * $client\->username
\&    * Param: none
\&    * Return: The username returned by the auth response. 
\&
\&    Obtain the value of username as obtained by the VSAP auth response.
.Ve
.SS "\fIplatform()\fP"
.IX Subsection "platform()"
.Vb 3
\&    * $client\->platform
\&    * Param: none
\&    * Return: The platform returned by the auth response. 
\&
\&    Obtain the value of platform as obtained by the VSAP auth response.
.Ve
.SS "\fIproduct()\fP"
.IX Subsection "product()"
.Vb 3
\&    * $client\-product
\&    * Param: none
\&    * Return: The product returned by the auth response. 
\&
\&    Obtain the value of domain name as obtained by the VSAP auth response.
.Ve
