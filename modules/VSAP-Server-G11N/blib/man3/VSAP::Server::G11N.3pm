.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Server::G11N 3"
.TH VSAP::Server::G11N 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Server::G11N \- Base class for g11n methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use VSAP::Server::G11n;
\&
\&    my $g  = VSAP::Server::G11N\->new({DEFAULT_ENCODING => \*(AqUTF\-8\*(Aq,
\&                               DEFAULT_DECODING => \*(AqIS\-2022\-JP\*(Aq});
\&
\& To subclass:
\&
\&    use base \*(AqVSAP::Server::G11N\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`VSAP::Server::G11N\*(C'\fR is a base class which holds generic g11n methods.
.SH "NOTES"
.IX Header "NOTES"
.SH "REQUIRED LIBRARIES"
.IX Header "REQUIRED LIBRARIES"
.Vb 4
\&        Native      : strict
\&                    : vars
\&                    : constant
\&                    : Carp
.Ve
.SH "MAJOR REVISIONS"
.IX Header "MAJOR REVISIONS"
.Vb 1
\&        * Feb, 2002 \- Initial Creation.
.Ve
.SH "ENVIRONMENTAL SETTINGS"
.IX Header "ENVIRONMENTAL SETTINGS"
.Vb 1
\&    None
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 10
\&     Purpose     : Create VSAP::Server::G11N object
\&     Parameters  : hash reference
\&                   {DEFAULT_ENCODING => \*(AqUTF\-8\*(Aq}
\&     Returns     : Object
\&     Author/Date : Kevin Meltzer, Feb. 2002
\&     Comments    : Any parameter can be passed to new() to create a property on
\&                   the object. DEFAULT_ENCODING is meant to be a consistant one
\&                   across subclasses. This feature may change in the future.
\&                   The LAST_ERROR property is currently created to hold an error
\&                   message.
.Ve
.SS "\fIconvert()\fP"
.IX Subsection "convert()"
.Vb 9
\&     Purpose     : Encode from X to Y
\&     Parameters  : hash reference
\&                   {to_encoding => \*(AqUTF\-8\*(Aq,
\&                    from_encoding => \*(AqISO\-2022\-JP\*(Aq,
\&                    default_encoding => \*(AqUTF\-8\*(Aq, # optional
\&                    string => $string}
\&     Returns     : $scalar or undef
\&     Author/Date : Kevin Meltzer, Feb. 2002
\&     Comments    : Wrapper for Encode module
.Ve
.SS "\fIreplace_characters()\fP"
.IX Subsection "replace_characters()"
.Vb 12
\&     Purpose     : Replace characters from a string with another
\&     Parameters  : hash reference
\&                   {string => $strinig,
\&                    extra => \*(Aq\ex00\*(Aq, # optional extra characters
\&                    no_default => 0, # or 1.. optional
\&                    new_char => \*(AqX\*(Aq} # optional, defaults to ?
\&     Returns     : $scalar 
\&     Author/Date : Kevin Meltzer, Feb. 2002
\&     Comments    : This is meant to be used to convert certain characters to ?
\&                   when they do not display correctly. Currently the default
\&                   character(s) replaced are:
\&                   \ex1B \- Control character
\&
\&                   Setting no_default to a true value will cause only what is in
\&                   \*(Aqextra\*(Aq to be substituted. In that case, may as well just use
\&                   a regular expression :) The \*(Aqnew_char\*(Aq arg will allow you to
\&                   override the default ? replacement character.
\&
\&                   This is probably unused with the Iconv \-> Encode conversion.
.Ve
