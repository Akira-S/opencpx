.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Server::Util 3"
.TH VSAP::Server::Util 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Server::Util \- Miscellaneous VSAP functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VSAP::Server::Util qw(xml_esacpe gmt2local);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "\fBsize_string\fP"
.IX Subsection "size_string"
\&\s-1FIXME\s0
.SS "\fBxml_escape\fP"
.IX Subsection "xml_escape"
Returns an xml escaped string, suitable for running through an xml
parser like XML::SimpleObject.
.PP
.Vb 2
\&  my $unsafe = "joe & bob \en are after << you!\ex00\`cat /etc/passwd\`\en";
\&  my $safe   = VSAP::Server::Util::xml_escape($unsafe);  ## now $safe is safe
.Ve
.PP
Currently escaped entities:
.IP "\fBampersand\fR" 4
.IX Item "ampersand"
\&\e&    => &amp;
.IP "\fBless than\fR" 4
.IX Item "less than"
<     => &lt;
.IP "\fBgreater than\fR" 4
.IX Item "greater than"
>     => &gt;
.IP "\fBcarriage return\fR" 4
.IX Item "carriage return"
\&\er    => &#013;
.IP "\fBnewline\fR" 4
.IX Item "newline"
\&\en    => &#010;
.IP "\fBother non-printables are removed\fR" 4
.IX Item "other non-printables are removed"
[\ex00\-\ex17\ex7f]
.SS "\fBgmt2local\fP"
.IX Subsection "gmt2local"
Parses dates via HTTP::Date and Time::Zone and returns a large hash
reference containing the date/time elements for \s-1GMT\s0, the original date, and the localtime date with \s-1DST\s0 considerations.
.PP
\&\s-1DST\s0 handling may be done in two ways: set \f(CW$ENV\fR{'\s-1TZ\s0'} or pass an
abbreviated timezone as a named parameter (see below for example).
When both environment variable and paramter are present, the parameter
takes precedence. When neither are present, \s-1GMT\s0 is assumed.
.PP
Example:
.PP
.Vb 1
\&  my $dref;
\&
\&  $dref = gmt2local( { \*(Aqepoch\*(Aq => 123457689,
\&                       \*(Aqzone\*(Aq  => \*(AqJST\*(Aq } );
\&  $dref = gmt2local( { \*(Aqdate\*(Aq  => "12:34:56 7 Aug 2008 GMT",
\&                       \*(Aqzone\*(Aq  => \*(AqMST7MDT\*(Aq } );
\&  $dref = gmt2local( { \*(Aqdate\*(Aq  => "12:34:56 7 Aug 2008 GMT" } );
\&  $dref = gmt2local( \*(Aq12:34:56 7 Aug 2008 GMT\*(Aq );
\&
\&  print "Local hour is $dref\->{\*(Aqhour\*(Aq}\en";
.Ve
.PP
The following fields are available:
.IP "\fBepoch\fR" 4
.IX Item "epoch"
date string converted to epoch seconds (\s-1GMT\s0). An epoch may also be
used as a named parameter, in which case that epoch will be returned.
All epoch seconds are assumed to be in \s-1GMT\s0. This might change if I
think about it more.
.IP "\fBorig, local, gmt\fR" 4
.IX Item "orig, local, gmt"
Original date string, localtime date string, and \s-1GMT\s0 date string.
These are formatted using the following format:
.Sp
.Vb 1
\&    06 Nov 1994 06:49:37 UTC
.Ve
.IP "\fBoyear, year, gyear\fR" 4
.IX Item "oyear, year, gyear"
Original year, localtime year, and \s-1GMT\s0 year. The year is expressed as
a four-digit year with century.
.IP "\fBomon, mon, gmon\fR" 4
.IX Item "omon, mon, gmon"
Original month, localtime month, and \s-1GMT\s0 month as integers. These are
already adjusted from 1 so January = 1, etc.
.IP "\fBoday, day, gday\fR" 4
.IX Item "oday, day, gday"
Original day of month, localtime day of month, and \s-1GMT\s0 day of month
.IP "\fBohour, hour, ghour\fR" 4
.IX Item "ohour, hour, ghour"
Original 24 hour, localtime 24 hour, and \s-1GMT\s0 24 hour
.IP "\fBo12hour, 12hour, g12hour\fR" 4
.IX Item "o12hour, 12hour, g12hour"
Original 12 hour, localtime 12 hour, and \s-1GMT\s0 12 hour
.IP "\fBomin, min, gmin\fR" 4
.IX Item "omin, min, gmin"
Original minutes, localtime minutes, and \s-1GMT\s0 minutes
.IP "\fBosec, sec, gsec\fR" 4
.IX Item "osec, sec, gsec"
Original seconds, localtime seconds, and \s-1GMT\s0 seconds
.IP "\fBowday, wday, gwday\fR" 4
.IX Item "owday, wday, gwday"
Day of week as an integer (e.g., Sun = 1, Mon = 1, Tue = 2, Wed = 3,
etc.)
.IP "\fBodst, dst\fR" 4
.IX Item "odst, dst"
Daylight Saving Time flag. True if the date falls during a \s-1DST\s0 time
for the given date.
.Sp
.Vb 4
\&  $d = gmt2local({\*(Aqdate\*(Aq => \*(AqThu, 18 Apr 2002 13:11:48 JST\*(Aq,
\&                  \*(Aqzone\*(Aq => \*(AqPST8PDT\*(Aq});
\&  print "In California, the date is " . ($d\->{\*(Aqdst\*(Aq} ? \*(Aq\*(Aq : \*(Aqnot \*(Aq) . "DST\en";
\&  print "And in Japan, the date is " . ($d\->{\*(Aqodst\*(Aq} ? \*(Aq\*(Aq : \*(Aqnot \*(Aq) . "DST\en";
.Ve
.IP "\fBooff, off, goff\fR" 4
.IX Item "ooff, off, goff"
Original offset, localtime offset, and \s-1GMT\s0 offset (which is always '+0000')
.SH "AUTHOR"
.IX Header "AUTHOR"
gmt2local, Scott Wiersdorf, <scott@perlcode.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
