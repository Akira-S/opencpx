.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Server::Modules::vsap::config 3"
.TH VSAP::Server::Modules::vsap::config 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Server::Modules::vsap::config \- CPX configuration data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VSAP::Server::Modules::vsap::config;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
vsap::config manages the \s-1CPX\s0 configuration file
(\fI/usr/local/etc/cpx.conf\fR). The file is an \s-1XML\s0 dom and is parsed by
this module.
.PP
\&\s-1NOTE:\s0 This object should not be long-lived because of possible
race-conditions with other processes. Particularly, if two domain
admins are making changes, a significant risk exists that one will
overwrite changes made by the other.
.SS "new(%args)"
.IX Subsection "new(%args)"
Creates a new config object. Possible parameters are \fBusername\fR and
\&\fBuid\fR. \fBuid\fR has precedence over \fBusername\fR.
.PP
.Vb 1
\&  my $co = new VSAP::Server::Modules::vsap::config( uid => $vsap\->{uid} );
.Ve
.PP
Arguments:
.IP "auto_refresh" 4
.IX Item "auto_refresh"
Enabled by default. When set to a false value, disables invoking the
\&\fBrefresh\fR method.
.IP "auto_compat" 4
.IX Item "auto_compat"
Enabled by default. When set to a false value, disables invoking the
\&\fBcompat\fR method.
.SS "init(%args)"
.IX Subsection "init(%args)"
Initializes an object; arguments are the same as \fBnew\fR.
.PP
.Vb 1
\&  $old_co\->init( username => \*(Aqjoe\*(Aq );
.Ve
.SS "refresh"
.IX Subsection "refresh"
Polls system services and updates the object accordingly. This is
implicitly called during \fBinit\fR. Normally, you would not call
\&\fBrefresh\fR unless you suspected the platform services have changed
underneath the object (i.e., after the object was initialized).
.PP
.Vb 1
\&  $co\->refresh;
.Ve
.PP
Affected elements in the config file include:
.IP "disabled" 4
.IX Item "disabled"
checks whether the user is disabled or not.
.IP "services" 4
.IX Item "services"
see capabilities
.IP "capabilities" 4
.IX Item "capabilities"
checks the status of each service in \f(CW%SERVICES\fR and \f(CW%EXT_SERVICES\fR and
updates the corresponding elements.
.SS "commit"
.IX Subsection "commit"
Writes the contents of the object to an \s-1XML\s0 file.
.SS "capability('service')"
.IX Subsection "capability('service')"
Returns whether the specified capability is available for this user.
.PP
.Vb 1
\&  print "Have ftp\en" if $co\->capability(\*(Aqftp\*(Aq);
.Ve
.SS "capabilities( [%args] )"
.IX Subsection "capabilities( [%args] )"
Returns a hash reference of capabilities for this user. If \f(CW%args\fR is
set, services will first be set accordingly.
.PP
.Vb 1
\&  my %capa = %{ $co\->capabilities( ftp => 0, mail => 1, webmail => 1 ) };
.Ve
.PP
Note that if the platform service (e.g., ftp, mail, shell) has not
been disabled prior to the (set) capabilities call, the capability
will be overridden and will not be disabled; you can't remove
capability for a service that is already in place. This functionality
may not be desireable.
.SS "service"
.IX Subsection "service"
Analogous to \fBcapability\fR.
.SS "services( [%args] )"
.IX Subsection "services( [%args] )"
Analogous to \fBcapabilities\fR. If \f(CW%args\fR is set, services will be
enabled or disabled for this user.
.PP
.Vb 2
\&  ## turn off ftp
\&  $co\->services( ftp => 0 );
.Ve
.SS "\fIpackages()\fP"
.IX Subsection "packages()"
Returns a hash reference of optional vinstall platform packages
that are currently installed for this cpx.
.SS "\fIsiteprefs()\fP"
.IX Subsection "siteprefs()"
Returns a hash reference of cpx site preferences.
.ie n .SS "users( [domain => ""foo.com""] | [admin => 'joeuser'] )"
.el .SS "users( [domain => ``foo.com''] | [admin => 'joeuser'] )"
.IX Subsection "users( [domain => foo.com] | [admin => 'joeuser'] )"
Returns a hashref of user => domain pairs.
.PP
When given a domain, all end users for that domain are returned. When
given an admin, all end users provisioned under that admin are
returned.
.SS "domain"
.IX Subsection "domain"
Sets/gets the domain name for the uid of this object.
.SH "CAPABILITIES vs SERVICES vs EU_CAPABILITIES"
.IX Header "CAPABILITIES vs SERVICES vs EU_CAPABILITIES"
Each user has two property sets: capabilities and services.
.PP
The current capabilities of a user are shell, email, ftp, webmail, and
fileman. Services is a proper subset of capabilities. Services
indicates what the settings of the user's capabilities are. For
example, if a user has the following capabilities:
.PP
.Vb 5
\&  shell   => 0
\&  mail    => 1
\&  sftp    => 0
\&  ftp     => 1
\&  webmail => 0
.Ve
.PP
The services will look like:
.PP
.Vb 2
\&  mail    => 1
\&  ftp     => 1
.Ve
.PP
The capabilities settings determine, in the \s-1UI\s0, which checkboxes to
display, which features to surface for a user generally, while the
services setting determines the status of those checkboxes or other
features (though it could also affect display of webmail, for
example).
.PP
If a user has shell capability, a shell line will appear when they
view their properties under \*(L"My Profile\*(R" (for example). If the shell
is set to /sbin/nologin, the shell setting will read \*(L"no shell\*(R". If
the user has no shell capability, no shell line will appear at all
when they view their properties. The idea was that if DAs or SAs don't
want their end users to know that a feature exists or is available,
they just remove the capability and no \s-1UI\s0 element will surface at all
for that.
.PP
Eu_capabilities refers to the kinds of capabilities a domain admin may
give to his end users. The <eu_capabilities> node will only
be found under a domain admin's <user> node.
.SS "compat"
.IX Subsection "compat"
Updates a config file to the latest version. Automatically called in
the constructor.
.SS "Philosophy"
.IX Subsection "Philosophy"
We want to have config.pm be a reliable way to receive the status of
a particular service, with the assumption that \s-1CPX\s0 will be the only
supported method of changing the status of a service. We'll do our
best to allow platform changes independent of \s-1CPX\s0, but the sheer
number of possibilities make it impossible for \s-1CPX\s0 to guarantee
sanity.
.PP
Each service that has its own module (e.g., mail:spamassassin,
mail:clamav, etc.) should have a small set of procedures named:
.PP
.Vb 3
\&  nv_status()
\&  nv_enable()
\&  nv_disable()
.Ve
.PP
These methods should be exported by the \s-1VSAP\s0 module for config.pm
(this file) to import. This will allow us a programmatic way to
enable, disable, and query the status of each of these services.
Platform sanity checks should go in the individual service modules.
.PP
New services should be put in the \f(CW%EXT_SERVICES\fR hash at the top of
config.pm, indicating whether the service implements and exports the
nv_*() procedures.
.PP
The config 'capabilities' node is still authoritative in all
cases. The capabilities node for a particular service may be initially
determined by platform tests (i.e., if \s-1SA\s0 were already installed, the
capabilities node for spamassassin would be set).
.SH "NOTES"
.IX Header "NOTES"
.IP "\s-1FIXME\s0" 4
.IX Item "FIXME"
We don't have any locking mechanism in this module (but we should!).
Exercise as much care as you can for now to avoid corruption. This
must be fixed before production.
.IP "*" 4
What to do when a new domain is added not via cpx? Tell the user to
delete the entire <domains/> node. It will rebuild on its own.
.IP "*" 4
Authorization is not handled in this module; it should be handled at
the application layer (i.e., in the \s-1VSAP\s0) to make sure that average
users don't go horking the configuration file.
.IP "*" 4
Once this module has been in wide-use, version bumps (incompatible \s-1API\s0
changes) will require some kind of transformation on the configuration
file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIvsap\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott Wiersdorf, <scott@perlcode.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by \s-1MYNAMESERVER\s0, \s-1LLC\s0
.PP
No part of this module may be duplicated in any form without written
consent of the copyright holder.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 3032:" 4
.IX Item "Around line 3032:"
Expected text after =item, not a bullet
.IP "Around line 3037:" 4
.IX Item "Around line 3037:"
Expected text after =item, not a bullet
.IP "Around line 3043:" 4
.IX Item "Around line 3043:"
Expected text after =item, not a bullet
