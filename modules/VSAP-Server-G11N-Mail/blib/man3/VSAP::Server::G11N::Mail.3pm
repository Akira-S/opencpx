.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VSAP::Server::G11N::Mail 3"
.TH VSAP::Server::G11N::Mail 3 "2014-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VSAP::Server::G11N::Mail \- Subclass for email g11n methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use VSAP::Server::G11N::Mail;
\&    
\&    my $mail = VSAP::Server::G11N::Mail\->new({DEFAULT_ENCODING => \*(AqUTF\-8\*(Aq});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`VSAP::Server::G11N::Mail\*(C'\fR is a subclass of \f(CW\*(C`VSAP::Server::G11N\*(C'\fR which holds email specific 
methods. These methods are used for getting (parsing) various parts of an email
message, as well as setting (creating) those same parts. This module will handle
all appropriate base64 and quoted-printable (de|en)coding, as well as charset
conversions.
.SH "NOTES"
.IX Header "NOTES"
The \fInew()\fR method is inherited from \f(CW\*(C`VSAP::Server::G11N\*(C'\fR. Please read the documentation
for \f(CW\*(C`VSAP::Server::G11N\*(C'\fR, if you haven't already.
.PP
The \s-1DEFAULT_ENCODING\s0 parameter of the \fInew()\fR method will be used in place of any
method which uses a 'default_encoding' paramenter, if it is not supplied. The
\&'default_encoding' parameter is optional, and should be used when a) there was
no \s-1DEFAULT_ENCODING\s0 specified with \fInew()\fR, and b) when you want to override what
is in \s-1DEFAULT_ENCODING\s0.
.SH "REQUIRED LIBRARIES"
.IX Header "REQUIRED LIBRARIES"
.Vb 6
\&        Native      : strict
\&                    : vars
\&                    : base
\&                    : constant
\&                    : Carp
\&                    : VSAP::Server::G11N 
\&
\&        CPAN        : MIME::Base64
\&                    : MIME::QuotedPrint 
\&                    : Mail::Address
.Ve
.SH "MAJOR REVISIONS"
.IX Header "MAJOR REVISIONS"
.Vb 1
\&        * Feb, 2002 \- Initial Creation.
.Ve
.SH "ENVIRONMENTAL SETTINGS"
.IX Header "ENVIRONMENTAL SETTINGS"
.Vb 1
\&    None
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fIget_subject()\fP"
.IX Subsection "get_subject()"
.Vb 8
\&     Purpose     : Return decoded subject
\&     Parameters  : hash reference
\&                   {to_encoding => \*(AqUTF\-8\*(Aq,
\&                    default_encoding => \*(AqUTF\-8\*(Aq, # optional
\&                    subject => $string}
\&     Returns     : $scalar or undef
\&     Author/Date : Kevin Meltzer, Feb. 2002
\&     Comments    :
.Ve
.SS "\fIset_subject()\fP"
.IX Subsection "set_subject()"
.Vb 9
\&     Purpose     : Create encoded subject line
\&     Parameters  : hash reference 
\&                   {to_encoding => \*(AqUTF\-8\*(Aq,
\&                    from_encoding => \*(AqISO\-2022\-JP\*(Aq, 
\&                    default_encoding => \*(AqUTF\-8\*(Aq, # optional
\&                    subject => $string}
\&     Returns     : $scalar or undef 
\&     Author/Date : Kevin Meltzer, Feb. 2002 
\&     Comments    :
.Ve
.SS "\fIget_address()\fP"
.IX Subsection "get_address()"
.Vb 8
\&     Purpose     : Return a decoded email address phrase
\&     Parameters  : hash reference
\&                   {\*(Aqto_encoding\*(Aq => \*(AqISO\-2022\-JP\*(Aq,
\&                    \*(Aqdefault_encoding\*(Aq => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqaddress\*(Aq => [$address1, $address2]}
\&     Returns     : array ref of decoded addresses. undef for failed addresses.    
\&     Author/Date : Kevin Meltzer, Feb. 2002 
\&     Comments    :
.Ve
.SS "\fIset_address()\fP"
.IX Subsection "set_address()"
.Vb 9
\&     Purpose     : Return an encoded email address (phrase)
\&     Parameters  : hash ref
\&                   {\*(Aqto_encoding\*(Aq      => \*(AqISO\-8859\-1\*(Aq,
\&                    \*(Aqfrom_encoding\*(Aq    => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqdefault_encoding\*(Aq => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqaddress\*(Aq          => [$address1, $address1]}    
\&     Returns     : array reference of encoded email addresses. undef for failed ones.    
\&     Author/Date : Kevin Meltzer, Feb. 2002 
\&     Comments    :
.Ve
.SS "\fIget_attachment_name()\fP"
.IX Subsection "get_attachment_name()"
.Vb 9
\&     Purpose     : Return decoded attachment filenames.
\&     Parameters  : hash reference
\&                   {\*(Aqto_encoding\*(Aq      => \*(AqShift_JIS\*(Aq,
\&                    \*(Aqfrom_encoding\*(Aq    => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqdefault_encoding\*(Aq => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqattachments\*(Aq      => [$file1, $file2]} 
\&     Returns     : array ref of decoded filenames. undef for failed ones.    
\&     Author/Date : Kevin Meltzer, Feb. 2002 
\&     Comments    :
.Ve
.SS "\fIset_attachment_name()\fP"
.IX Subsection "set_attachment_name()"
.Vb 5
\&     Purpose     : 
\&     Parameters  :     
\&     Returns     :     
\&     Author/Date : Kevin Meltzer, Feb. 2002 
\&     Comments    :
.Ve
.SS "\fIget_body()\fP"
.IX Subsection "get_body()"
.Vb 10
\&     Purpose     : Return message body base64/quoted\-printable decoded (if needed)
\&     Parameters  : hash ref
\&                   {\*(Aqto_encoding\*(Aq      => \*(AqUS\-ASCII\*(Aq,
\&                    \*(Aqfrom_encoding\*(Aq    => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqdefault_encoding\*(Aq => \*(AqUS\-ASCII\*(Aq,
\&                    \*(Aqcontent_encoding\*(Aq => \*(AqB\*(Aq}
\&     Returns     : scalar of body contents, undef on failure.
\&     Author/Date : Kevin Meltzer, Feb. 2002
\&     Comments    : content_encoding B<must> be B, Q or something else. Only B and Q
\&                   are recognized to do appropriate decoding.
\&                   B \- base64
\&                   Q \- quoted\-printable
\&                   others \- no decoding done
\&                
\&                   This can be obtained via the message header: Content\-Transfer\-Encoding
.Ve
.SS "\fIset_body()\fP"
.IX Subsection "set_body()"
.Vb 10
\&     Purpose     : Create message body with proper encodings.
\&     Parameters  : hash ref
\&                   {\*(Aqto_encoding\*(Aq => \*(AqISO\-2022\-JP\*(Aq,
\&                    \*(Aqfrom_encoding\*(Aq => \*(AqUTF\-8\*(Aq,
\&                    \*(Aqdefault_encoding\*(Aq => \*(AqUTF\-8\*(Aq,}
\&     Returns     : hash ref, or undef on failure
\&                   {string => $new_body, encoding \*(Aq7bit\*(Aq}
\&     Author/Date : Kevin Meltzer, Feb. 2002
\&     Comments    : The returned \*(Aqencoding\*(Aq should be used for the message
\&                   header: Content\-Transfer\-Encoding
.Ve
